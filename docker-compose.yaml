services:
  builder:
    profiles: ["build"]
    image: maven:3.8.5-openjdk-17-slim
    container_name: dms_builder
    volumes:
      - ./:/usr/src/dms
      - m2-repo:/root/.m2
    working_dir: /usr/src/dms
    command: >
      sh -c "
        cd storage && mvn clean install &&
        cd ../search  && mvn clean install
      "
    restart: "no"

  web:
    container_name: web
    build: ./web
    image: web
    ports:
      - "8080:3000"
    networks:
      - app
    depends_on:
      - postgres
      - minio

  gateway:
    container_name: gateway
    build: ./gateway
    ports:
      - "3457:8000"
    networks:
      - app
    depends_on:
      - search
      - storage

  storage:
    container_name: storage
    build: ./storage
    image: storage
    ports:
      - "8081:8080"
    networks:
      - app
    depends_on:
      - postgres
      - minio

  search:
    container_name: search
    build: ./search
    image: search
    ports:
      - "8082:8080"
    networks:
      - app
    depends_on:
      - postgres

  ocr:
    container_name: ocr
    build: ./ocr
    image: ocr
    ports:
      - "8083:5000"
    networks:
      - app
    depends_on:
      - postgres

  postgres:
    container_name: postgres
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: dms
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app

    # <--- DISABLE the default pg_isready healthcheck to stop the FATAL logs
    healthcheck:
      disable: true

    entrypoint:
      - sh
      - -c
      - |
        set -e

        if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
          exec docker-entrypoint.sh postgres
        fi

        docker-entrypoint.sh postgres &
        pid="$$!"

        until pg_isready -U "$$POSTGRES_USER"; do
          sleep 0.1
        done

        psql -v ON_ERROR_STOP=1 \
             -U "$$POSTGRES_USER" \
             -c "ALTER USER \"$$POSTGRES_USER\" WITH PASSWORD '$$POSTGRES_PASSWORD';"

        wait "$$pid"

  minio:
    container_name: minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9090"
    ports:
      - "9005:9000"
      - "9090:9090"
    networks:
      - app

volumes:
  m2-repo:
  postgres-data:

networks:
  app:
    driver: bridge